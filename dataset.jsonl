{"type": "math", "difficulty": 0.28, "conversation": [{"role": "user", "content": "Calculate: (5 + 3) * 4 / 2 - 1", "timestamp": 1750000032.000000}, {"role": "assistant", "content": "15.0", "timestamp": 1750000032.000001}], "metadata": {"expected_answer": 15.0}}
{"type": "math", "difficulty": 0.48, "conversation": [{"role": "user", "content": "Solve for x: (x / 3) + 2 = 7", "timestamp": 1750000033.000000}, {"role": "assistant", "content": "15.0", "timestamp": 1750000033.000001}], "metadata": {"expected_answer": 15.0}}
{"type": "math", "difficulty": 0.62, "conversation": [{"role": "user", "content": "A car travels 150 miles on 5 gallons of gas. Miles per gallon?", "timestamp": 1750000034.000000}, {"role": "assistant", "content": "30.0", "timestamp": 1750000034.000001}], "metadata": {"expected_answer": 30.0}}
{"type": "math", "difficulty": 0.32, "conversation": [{"role": "user", "content": "Value of: 50 - (6 * 7) + 4", "timestamp": 1750000035.000000}, {"role": "assistant", "content": "12.0", "timestamp": 1750000035.000001}], "metadata": {"expected_answer": 12.0}}
{"type": "math", "difficulty": 0.58, "conversation": [{"role": "user", "content": "A book has 250 pages. You read 20% of it. How many pages read?", "timestamp": 1750000036.000000}, {"role": "assistant", "content": "50.0", "timestamp": 1750000036.000001}], "metadata": {"expected_answer": 50.0}}
{"type": "code", "difficulty": 0.45, "conversation": [{"role": "user", "content": "Python func 'is_even(num)' -> True if num is even, else False.\nSignature: def is_even(num: int) -> bool:\n    # Your code here", "timestamp": 1750000037.000000}, {"role": "assistant", "content": "def is_even(num: int) -> bool:\n    return num % 2 == 0", "timestamp": 1750000037.000001}], "metadata": {"expected_answer": {"name": "is_even", "description": "Python function 'is_even(num)' that returns True if num is even, False otherwise.", "signature": "def is_even(num: int) -> bool:", "test_cases": [{"input": (2,), "output": true}, {"input": (3,), "output": false}, {"input": (0,), "output": true}, {"input": (-4,), "output": true}], "solution": "def is_even(num: int) -> bool:\n    return num % 2 == 0"}}}
{"type": "code", "difficulty": 0.68, "conversation": [{"role": "user", "content": "Python func 'sum_digits(n)' to sum digits of a positive int n.\nSignature: def sum_digits(n: int) -> int:\n    # Your code here", "timestamp": 1750000038.000000}, {"role": "assistant", "content": "def sum_digits(n: int) -> int:\n    s = 0\n    if n < 0: n = -n # Or handle error\n    while n:\n        s += n % 10\n        n //= 10\n    return s", "timestamp": 1750000038.000001}], "metadata": {"expected_answer": {"name": "sum_digits", "description": "Python function 'sum_digits(n)' to sum the digits of a positive integer n.", "signature": "def sum_digits(n: int) -> int:", "test_cases": [{"input": (123,), "output": 6}, {"input": (4567,), "output": 22}, {"input": (8,), "output": 8}, {"input": (0,), "output": 0}], "solution": "def sum_digits(n: int) -> int:\n    s = 0\n    if n < 0: n = -n\n    while n:\n        s += n % 10\n        n //= 10\n    return s"}}}
{"type": "code", "difficulty": 0.72, "conversation": [{"role": "user", "content": "Python func 'gcd(a, b)' for greatest common divisor using Euclidean alg.\nSignature: def gcd(a: int, b: int) -> int:\n    # Your code here", "timestamp": 1750000039.000000}, {"role": "assistant", "content": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "timestamp": 1750000039.000001}], "metadata": {"expected_answer": {"name": "gcd", "description": "Python function 'gcd(a, b)' for the greatest common divisor of two integers a and b using the Euclidean algorithm.", "signature": "def gcd(a: int, b: int) -> int:", "test_cases": [{"input": (48, 18), "output": 6}, {"input": (101, 103), "output": 1}, {"input": (270, 192), "output": 6}, {"input": (0, 5), "output": 5}, {"input": (7, 0), "output": 7}], "solution": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)"}}}
{"type": "code", "difficulty": 0.82, "conversation": [{"role": "user", "content": "Implement 'InsertionSort' for a list of numbers in Python.\nSignature: def insertion_sort(arr: list) -> list:\n    # Your code here", "timestamp": 1750000040.000000}, {"role": "assistant", "content": "def insertion_sort(arr: list) -> list:\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr", "timestamp": 1750000040.000001}], "metadata": {"expected_answer": {"name": "insertion_sort", "description": "Implement the Insertion Sort algorithm for a list of numbers in Python.", "signature": "def insertion_sort(arr: list) -> list:", "test_cases": [{"input": ([5, 2, 4, 6, 1, 3],), "output": [1, 2, 3, 4, 5, 6]}, {"input": ([9, 1, 8, 2, 7, 3],), "output": [1, 2, 3, 7, 8, 9]}, {"input": ([],), "output": []}, {"input": ([3, 1, 2],), "output": [1, 2, 3]}], "solution": "def insertion_sort(arr: list) -> list:\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr"}}}
{"type": "code", "difficulty": 0.40, "conversation": [{"role": "user", "content": "Python func 'celsius_to_fahrenheit(c)' to convert Celsius to Fahrenheit.\nFormula: F = C * 9/5 + 32.\nSignature: def celsius_to_fahrenheit(celsius: float) -> float:\n    # Your code here", "timestamp": 1750000041.000000}, {"role": "assistant", "content": "def celsius_to_fahrenheit(celsius: float) -> float:\n    return celsius * 9/5 + 32", "timestamp": 1750000041.000001}], "metadata": {"expected_answer": {"name": "celsius_to_fahrenheit", "description": "Python function 'celsius_to_fahrenheit(celsius)' to convert Celsius to Fahrenheit.", "signature": "def celsius_to_fahrenheit(celsius: float) -> float:", "test_cases": [{"input": (0.0,), "output": 32.0}, {"input": (100.0,), "output": 212.0}, {"input": (-40.0,), "output": -40.0}, {"input": (25.0,), "output": 77.0}], "solution": "def celsius_to_fahrenheit(celsius: float) -> float:\n    return celsius * 9/5 + 32"}}}
{"type": "code", "difficulty": 0.88, "conversation": [{"role": "user", "content": "Python func 'quick_sort(arr)' (Hoare partition scheme).\nSignature: def quick_sort(arr: list) -> list:\n    # Your code here", "timestamp": 1750000042.000000}, {"role": "assistant", "content": "def quick_sort(arr: list) -> list:\n    def _quick_sort_recursive(items, low, high):\n        if low < high:\n            pivot_index = _partition(items, low, high)\n            _quick_sort_recursive(items, low, pivot_index) # Hoare recursive calls\n            _quick_sort_recursive(items, pivot_index + 1, high)\n\n    def _partition(items, low, high):\n        pivot = items[(low + high) // 2] # Choose middle as pivot\n        i = low - 1\n        j = high + 1\n        while True:\n            i += 1\n            while items[i] < pivot:\n                i += 1\n            j -= 1\n            while items[j] > pivot:\n                j -= 1\n            if i >= j:\n                return j\n            items[i], items[j] = items[j], items[i]\n\n    if not arr: return []\n    # Make a copy to sort in-place for the recursive helper if preferred, or just pass arr\n    # items_copy = list(arr)\n    _quick_sort_recursive(arr, 0, len(arr) - 1)\n    return arr", "timestamp": 1750000042.000001}], "metadata": {"expected_answer": {"name": "quick_sort", "description": "Implement Quick Sort (Hoare partition scheme) for a list of numbers in Python.", "signature": "def quick_sort(arr: list) -> list:", "test_cases": [{"input": ([3, 6, 8, 10, 1, 2, 1],), "output": [1, 1, 2, 3, 6, 8, 10]}, {"input": ([9, 0, 3, 7, 2, 5, 4, 1, 6, 8],), "output": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]}, {"input": ([],), "output": []}, {"input": ([1],), "output": [1]}], "solution": "def quick_sort(arr: list) -> list:\n    def _quick_sort_recursive(items, low, high):\n        if low < high:\n            pivot_index = _partition(items, low, high)\n            _quick_sort_recursive(items, low, pivot_index) # Hoare recursive calls\n            _quick_sort_recursive(items, pivot_index + 1, high)\n\n    def _partition(items, low, high):\n        pivot = items[(low + high) // 2] # Choose middle as pivot\n        i = low - 1\n        j = high + 1\n        while True:\n            i += 1\n            while items[i] < pivot:\n                i += 1\n            j -= 1\n            while items[j] > pivot:\n                j -= 1\n            if i >= j:\n                return j\n            items[i], items[j] = items[j], items[i]\n\n    if not arr: return []\n    # Make a copy to sort in-place for the recursive helper if preferred, or just pass arr\n    # items_copy = list(arr)\n    _quick_sort_recursive(arr, 0, len(arr) - 1)\n    return arr"}}}
{"type": "code", "difficulty": 0.60, "conversation": [{"role": "user", "content": "Python func 'are_anagrams(s1, s2)' to check if two strings are anagrams.\nSignature: def are_anagrams(s1: str, s2: str) -> bool:\n    # Your code here", "timestamp": 1750000043.000000}, {"role": "assistant", "content": "def are_anagrams(s1: str, s2: str) -> bool:\n    s1_cleaned = ''.join(filter(str.isalnum, s1)).lower()\n    s2_cleaned = ''.join(filter(str.isalnum, s2)).lower()\n    return sorted(s1_cleaned) == sorted(s2_cleaned)", "timestamp": 1750000043.000001}], "metadata": {"expected_answer": {"name": "are_anagrams", "description": "Python function 'are_anagrams(s1, s2)' to check if two strings are anagrams (case-insensitive, ignoring spaces).", "signature": "def are_anagrams(s1: str, s2: str) -> bool:", "test_cases": [{"input": ("listen", "silent"), "output": true}, {"input": ("Dormitory", "Dirty room"), "output": true}, {"input": ("hello", "world"), "output": false}, {"input": ("Slot machines", "Cash lost in me"), "output": true}], "solution": "def are_anagrams(s1: str, s2: str) -> bool:\n    s1_cleaned = ''.join(filter(str.isalnum, s1)).lower()\n    s2_cleaned = ''.join(filter(str.isalnum, s2)).lower()\n    return sorted(s1_cleaned) == sorted(s2_cleaned)"}}}
{"type": "code", "difficulty": 0.79, "conversation": [{"role": "user", "content": "Python class 'BinaryTreeNode' and func 'dfs_preorder(root)' for DFS traversal.\nClasses/Signatures:\nclass BinaryTreeNode:\n    def _init_(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef dfs_preorder(root: BinaryTreeNode | None) -> list:\n    # Your code here", "timestamp": 1750000044.000000}, {"role": "assistant", "content": "class BinaryTreeNode:\n    def _init_(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef dfs_preorder(root: BinaryTreeNode | None) -> list:\n    result = []\n    if root:\n        result.append(root.value)\n        result.extend(dfs_preorder(root.left))\n        result.extend(dfs_preorder(root.right))\n    return result", "timestamp": 1750000044.000001}], "metadata": {"expected_answer": {"name": "dfs_preorder", "description": "Implement BinaryTreeNode class and a DFS pre-order traversal function.", "signature": "class BinaryTreeNode:\n    def _init_(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef dfs_preorder(root: BinaryTreeNode | None) -> list:", "test_code": "root = BinaryTreeNode(1)\nroot.left = BinaryTreeNode(2)\nroot.right = BinaryTreeNode(3)\nroot.left.left = BinaryTreeNode(4)\nroot.left.right = BinaryTreeNode(5)\nassert dfs_preorder(root) == [1, 2, 4, 5, 3]\nassert dfs_preorder(None) == []\nroot2 = BinaryTreeNode('A')\nroot2.right = BinaryTreeNode('B')\nroot2.right.left = BinaryTreeNode('C')\nassert dfs_preorder(root2) == ['A', 'B', 'C']", "solution": "class BinaryTreeNode:\n    def _init_(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef dfs_preorder(root: BinaryTreeNode | None) -> list:\n    result = []\n    if root:\n        result.append(root.value)\n        result.extend(dfs_preorder(root.left))\n        result.extend(dfs_preorder(root.right))\n    return result"}}}
{"type": "code", "difficulty": 0.52, "conversation": [{"role": "user", "content": "Python func 'remove_duplicates(lst)' from a list, preserving order.\nSignature: def remove_duplicates(lst: list) -> list:\n    # Your code here", "timestamp": 1750000045.000000}, {"role": "assistant", "content": "def remove_duplicates(lst: list) -> list:\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result", "timestamp": 1750000045.000001}], "metadata": {"expected_answer": {"name": "remove_duplicates", "description": "Python function 'remove_duplicates(lst)' to remove duplicates from a list while preserving the original order of elements.", "signature": "def remove_duplicates(lst: list) -> list:", "test_cases": [{"input": ([1, 2, 2, 3, 4, 3, 5],), "output": [1, 2, 3, 4, 5]}, {"input": (['a', 'b', 'a', 'c', 'b'],), "output": ['a', 'b', 'c']}, {"input": ([],), "output": []}, {"input": ([1, 1, 1, 1],), "output": [1]}], "solution": "def remove_duplicates(lst: list) -> list:\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result"}}}
{"type": "code", "difficulty": 0.90, "conversation": [{"role": "user", "content": "Python class 'Graph' for adjacency list graph with 'add_edge' and 'bfs(start_node)'.\nClasses/Signatures:\nclass Graph:\n    def _init_(self):\n        self.adj_list = {}\n\n    def add_edge(self, u, v):\n        # Add edge for undirected graph\n        pass\n\n    def bfs(self, start_node):\n        # Perform BFS, return visited nodes in order\n        pass", "timestamp": 1750000046.000000}, {"role": "assistant", "content": "from collections import deque\n\nclass Graph:\n    def _init_(self):\n        self.adj_list = {}\n\n    def add_edge(self, u, v):\n        self.adj_list.setdefault(u, []).append(v)\n        self.adj_list.setdefault(v, []).append(u)\n\n    def bfs(self, start_node):\n        if start_node not in self.adj_list:\n            return []\n        visited = set()\n        queue = deque([start_node])\n        result_order = []\n        visited.add(start_node)\n\n        while queue:\n            vertex = queue.popleft()\n            result_order.append(vertex)\n            # Sort neighbors for consistent test output, though not strictly required by BFS\n            # neighbors_sorted = sorted(self.adj_list.get(vertex, []))\n            for neighbor in self.adj_list.get(vertex, []): # neighbors_sorted:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n        return result_order", "timestamp": 1750000046.000001}], "metadata": {"expected_answer": {"name": "Graph_bfs", "description": "Implement Graph class (adjacency list) with add_edge and BFS traversal.", "signature": "class Graph:\n    def _init_(self):\n        self.adj_list = {}\n\n    def add_edge(self, u, v):\n        pass\n\n    def bfs(self, start_node):\n        pass", "test_code": "g = Graph()\ng.add_edge(0, 1)\ng.add_edge(0, 2)\ng.add_edge(1, 2)\ng.add_edge(2, 0)\ng.add_edge(2, 3)\ng.add_edge(3, 3)\nassert g.bfs(2) == [2, 0, 1, 3] or g.bfs(2) == [2, 1, 0, 3] # Order of neighbors can vary\nassert g.bfs(0) == [0, 1, 2, 3] or g.bfs(0) == [0, 2, 1, 3]\nassert g.bfs(4) == [] # Node not in graph\ng2 = Graph()\ng2.add_edge('A', 'B')\ng2.add_edge('A', 'C')\ng2.add_edge('B', 'D')\ng2.add_edge('C', 'E')\nbfs_result_A = g2.bfs('A')\nassert 'A' in bfs_result_A and 'B' in bfs_result_A and 'C' in bfs_result_A and 'D' in bfs_result_A and 'E' in bfs_result_A and len(bfs_result_A) == 5", "solution": "from collections import deque\n\nclass Graph:\n    def _init_(self):\n        self.adj_list = {}\n\n    def add_edge(self, u, v):\n        self.adj_list.setdefault(u, []).append(v)\n        self.adj_list.setdefault(v, []).append(u)\n\n    def bfs(self, start_node):\n        if start_node not in self.adj_list:\n            return []\n        visited = set()\n        queue = deque([start_node])\n        result_order = []\n        visited.add(start_node)\n\n        while queue:\n            vertex = queue.popleft()\n            result_order.append(vertex)\n            # Sort neighbors for consistent test output, though not strictly required by BFS\n            # neighbors_sorted = sorted(self.adj_list.get(vertex, []))\n            for neighbor in self.adj_list.get(vertex, []): # neighbors_sorted:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n        return result_order"}}}
{"type": "qa", "difficulty": 0.35, "conversation": [{"role": "user", "content": "What is the capital of Canada?", "timestamp": 1750000047.000000}, {"role": "assistant", "content": "The capital of Canada is Ottawa.", "timestamp": 1750000047.000001}], "metadata": {}}
{"type": "qa", "difficulty": 0.52, "conversation": [{"role": "user", "content": "Briefly explain what a 'for loop' is in programming.", "timestamp": 1750000048.000000}, {"role": "assistant", "content": "A 'for loop' in programming is a control flow statement used for iterating over a sequence (like a list, tuple, string, or range) or other iterable objects. It repeatedly executes a block of code for each item in the sequence.", "timestamp": 1750000048.000001}], "metadata": {}}
{"type": "qa", "difficulty": 0.75, "conversation": [{"role": "user", "content": "What is the role of an optimizer in training a neural network?", "timestamp": 1750000049.000000}, {"role": "assistant", "content": "In training a neural network, an optimizer's role is to update the model's parameters (weights and biases) in a way that minimizes the loss function. It uses the gradients of the loss function with respect to the parameters, calculated during backpropagation, to guide these updates. Common optimizers include SGD, Adam, and RMSprop.", "timestamp": 1750000049.000001}], "metadata": {}}
{"type": "qa", "difficulty": 0.25, "conversation": [{"role": "user", "content": "What color is a ripe banana?", "timestamp": 1750000050.000000}, {"role": "assistant", "content": "A ripe banana is typically yellow. Some varieties might have brown spots when fully ripe.", "timestamp": 1750000050.000001}], "metadata": {}}
{"type": "qa", "difficulty": 0.65, "conversation": [{"role": "user", "content": "Compare dynamic typing vs. static typing in programming languages.", "timestamp": 1750000051.000000}, {"role": "assistant", "content": "Static typing means variable types are checked at compile-time. This can catch type errors early and often leads to better performance. Examples: Java, C++, Go.\nDynamic typing means variable types are checked at run-time. This offers more flexibility and faster prototyping. Examples: Python, JavaScript, Ruby.", "timestamp": 1750000051.000001}], "metadata": {}}
{"type": "qa", "difficulty": 0.43, "conversation": [{"role": "user", "content": "What is the main function of the human heart?", "timestamp": 1750000052.000000}, {"role": "assistant", "content": "The main function of the human heart is to pump blood throughout the body, supplying oxygen and nutrients to tissues and removing carbon dioxide and other waste products.", "timestamp": 1750000052.000001}], "metadata": {}}
{"type": "qa", "difficulty": 0.78, "conversation": [{"role": "user", "content": "What is 'gradient checkpointing' and why is it used in BitZero?", "timestamp": 1750000053.000000}, {"role": "assistant", "content": "Gradient checkpointing is a technique used to reduce the memory footprint of training deep neural networks. Instead of storing all intermediate activations for backpropagation, it recomputes them during the backward pass. This trades computation time for memory. In BitZero, especially on hardware with limited VRAM like a GTX 1660 Super, it helps train larger models or use larger batch sizes than would otherwise be possible.", "timestamp": 1750000053.000001}], "metadata": {}}
{"type": "qa", "difficulty": 0.22, "conversation": [{"role": "user", "content": "What is 2 + 2?", "timestamp": 1750000054.000000}, {"role": "assistant", "content": "2 + 2 equals 4.", "timestamp": 1750000054.000001}], "metadata": {}}
{"type": "qa", "difficulty": 0.58, "conversation": [{"role": "user", "content": "Explain 'padding' and 'truncation' in sequence modeling.", "timestamp": 1750000055.000000}, {"role": "assistant", "content": "In sequence modeling, like for text, sequences often have varying lengths. To process them in batches, they need to be a uniform length.\nPadding: Adding special tokens (e.g., ) to shorter sequences to make them reach the desired uniform length.\nTruncation: Cutting off parts of longer sequences (either from the beginning or end) to fit the desired uniform length.", "timestamp": 1750000055.000001}], "metadata": {}}
{"type": "qa", "difficulty": 0.81, "conversation": [{"role": "user", "content": "What are some ethical considerations in developing advanced AI like BitZero?", "timestamp": 1750000056.000000}, {"role": "assistant", "content": "Ethical considerations for advanced AI like BitZero include: \n1. Bias: Ensuring the self-generated tasks or internal reasoning doesn't develop or amplify harmful biases.\n2. Misuse: Potential for the technology to be used for malicious purposes if it becomes highly capable.\n3. Transparency: Understanding how the AI makes decisions, especially with self-play and quantization making it less interpretable.\n4. Job displacement: Impact on human roles if the AI can perform complex reasoning tasks.\n5. Control: Ensuring the AI remains aligned with human values and intentions, especially with self-improving systems.", "timestamp": 1750000056.000001}], "metadata": {}}
{"type": "math", "difficulty": 0.70, "conversation": [{"role": "user", "content": "A pizza is cut into 8 slices. If you eat 3 slices, what fraction remains?", "timestamp": 1750000057.000000}, {"role": "assistant", "content": "5/8", "timestamp": 1750000057.000001}], "metadata": {"expected_answer": 0.625}}
{"type": "math", "difficulty": 0.52, "conversation": [{"role": "user", "content": "Solve: (x / 4) - 3 = 2", "timestamp": 1750000058.000000}, {"role": "assistant", "content": "20.0", "timestamp": 1750000058.000001}], "metadata": {"expected_answer": 20.0}}
{"type": "code", "difficulty": 0.65, "conversation": [{"role": "user", "content": "Python func 'find_first_occurrence(lst, item)' of item in list, or -1.\nSignature: def find_first_occurrence(lst: list, item: any) -> int:\n    # Your code here", "timestamp": 1750000059.000000}, {"role": "assistant", "content": "def find_first_occurrence(lst: list, item: any) -> int:\n    try:\n        return lst.index(item)\n    except ValueError:\n        return -1", "timestamp": 1750000059.000001}], "metadata": {"expected_answer": {"name": "find_first_occurrence", "description": "Python function 'find_first_occurrence(lst, item)' to find the index of the first occurrence of an item in a list, or -1 if not found.", "signature": "def find_first_occurrence(lst: list, item: any) -> int:", "test_cases": [{"input": ([1, 2, 3, 2, 4], 2), "output": 1}, {"input": (['a', 'b', 'c'], 'd'), "output": -1}, {"input": ([], 5), "output": -1}, {"input": (['x', 'y', 'z'], 'z'), "output": 2}], "solution": "def find_first_occurrence(lst: list, item: any) -> int:\n    try:\n        return lst.index(item)\n    except ValueError:\n        return -1"}}}
{"type": "code", "difficulty": 0.76, "conversation": [{"role": "user", "content": "Python func 'lcm(a, b)' for least common multiple of two positive ints.\nSignature: def lcm(a: int, b: int) -> int:\n    # Your code here (can use gcd)", "timestamp": 1750000060.000000}, {"role": "assistant", "content": "def gcd_for_lcm(a: int, b: int) -> int:\n    while(b):\n        a, b = b, a % b\n    return abs(a)\n\ndef lcm(a: int, b: int) -> int:\n    if a == 0 or b == 0:\n        return 0\n    res = abs(a * b) // gcd_for_lcm(a, b)\n    return res", "timestamp": 1750000060.000001}], "metadata": {"expected_answer": {"name": "lcm", "description": "Python function 'lcm(a, b)' for the least common multiple of two positive integers a and b.", "signature": "def lcm(a: int, b: int) -> int:", "test_cases": [{"input": (4, 6), "output": 12}, {"input": (15, 25), "output": 75}, {"input": (7, 5), "output": 35}, {"input": (1, 10), "output": 10}], "solution": "def gcd_for_lcm(a: int, b: int) -> int:\n    while(b):\n        a, b = b, a % b\n    return abs(a)\n\ndef lcm(a: int, b: int) -> int:\n    if a == 0 or b == 0:\n        return 0\n    res = abs(a * b) // gcd_for_lcm(a, b)\n    return res"}}}
{"type": "qa", "difficulty": 0.63, "conversation": [{"role": "user", "content": "What is a 'hash table' data structure and its main advantage?", "timestamp": 1750000061.000000}, {"role": "assistant", "content": "A hash table (or hash map) is a data structure that implements an associative array, mapping keys to values. It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. Its main advantage is fast average-case time complexity for lookups, insertions, and deletions (often O(1) on average).", "timestamp": 1750000061.000001}], "metadata": {}}
{"type": "math", "difficulty": 0.1, "conversation": [{"role": "user", "content": "What is 12 + 23?", "timestamp": 1716000000.123456}, {"role": "assistant", "content": "35", "timestamp": 1716000000.173456}], "metadata": {"expected_answer": 35}}
{"type": "math", "difficulty": 0.2, "conversation": [{"role": "user", "content": "Calculate 7 * 9.", "timestamp": 1716000015.234567}, {"role": "assistant", "content": "63", "timestamp": 1716000015.284567}], "metadata": {"expected_answer": 63}}
{"type": "math", "difficulty": 0.3, "conversation": [{"role": "user", "content": "Solve for x: 4x - 7 = 9", "timestamp": 1716000030.345678}, {"role": "assistant", "content": "4.0", "timestamp": 1716000030.395678}], "metadata": {"expected_answer": 4.0}}
{"type": "math", "difficulty": 0.4, "conversation": [{"role": "user", "content": "A recipe calls for 200 grams of flour. If you want to make half the recipe how much flour do you need?", "timestamp": 1716000045.456789}, {"role": "assistant", "content": "100 grams", "timestamp": 1716000045.506789}], "metadata": {"expected_answer": 100}}
{"type": "math", "difficulty": 0.2, "conversation": [{"role": "user", "content": "What is 50 / (2 + 3)?", "timestamp": 1716000060.567890}, {"role": "assistant", "content": "10.0", "timestamp": 1716000060.617890}], "metadata": {"expected_answer": 10.0}}
{"type": "math", "difficulty": 0.5, "conversation": [{"role": "user", "content": "If a square garden has a side of 5 meters what is its area?", "timestamp": 1716000075.678901}, {"role": "assistant", "content": "25 square meters", "timestamp": 1716000075.728901}], "metadata": {"expected_answer": 25}}
{"type": "math", "difficulty": 0.3, "conversation": [{"role": "user", "content": "What is 10% of 500?", "timestamp": 1716000090.789012}, {"role": "assistant", "content": "50.0", "timestamp": 1716000090.839012}], "metadata": {"expected_answer": 50.0}}
{"type": "code", "difficulty": 0.2, "conversation": [{"role": "user", "content": "Write a Python function `multiply` that takes two integers and returns their product.\nComplete:\ndef multiply(x: int, y: int) -> int:\n    # Your code here", "timestamp": 1716000105.890123}, {"role": "assistant", "content": "def multiply(x: int, y: int) -> int:\n    return x * y", "timestamp": 1716000105.940123}], "metadata": {"expected_answer": {"name": "multiply", "signature": "def multiply(x: int, y: int) -> int:", "test_cases": [{"input": (3, 4), "output": 12}, {"input": (-2, 5), "output": -10}, {"input": (0, 100), "output": 0}], "solution": "def multiply(x: int, y: int) -> int:\n    return x * y"}}}
{"type": "code", "difficulty": 0.3, "conversation": [{"role": "user", "content": "Implement a Python function `is_adult` that returns True if age is 18 or greater False otherwise.\ndef is_adult(age: int) -> bool:\n    # Your code here", "timestamp": 1716000120.901234}, {"role": "assistant", "content": "def is_adult(age: int) -> bool:\n    return age >= 18", "timestamp": 1716000120.951234}], "metadata": {"expected_answer": {"name": "is_adult", "signature": "def is_adult(age: int) -> bool:", "test_cases": [{"input": (20,), "output": true}, {"input": (17,), "output": false}, {"input": (18,), "output": true}], "solution": "def is_adult(age: int) -> bool:\n    return age >= 18"}}}
{"type": "code", "difficulty": 0.4, "conversation": [{"role": "user", "content": "Write a Python function `get_last_item` that returns the last item of a list. Return None if the list is empty.\ndef get_last_item(my_list: list) -> any:\n    # Your code here", "timestamp": 1716000135.012345}, {"role": "assistant", "content": "def get_last_item(my_list: list) -> any:\n    if not my_list:\n        return None\n    return my_list[-1]", "timestamp": 1716000135.062345}], "metadata": {"expected_answer": {"name": "get_last_item", "signature": "def get_last_item(my_list: list) -> any:", "test_cases": [{"input": ([1, 2, 3],), "output": 3}, {"input": (['a', 'b'],), "output": "b"}, {"input": ([],), "output": null}], "solution": "def get_last_item(my_list: list) -> any:\n    if not my_list:\n        return None\n    return my_list[-1]"}}}
{"type": "code", "difficulty": 0.6, "conversation": [{"role": "user", "content": "Create a Python function `sum_list` that calculates the sum of all numbers in a list.\ndef sum_list(numbers: list) -> int: # Assume list contains numbers\n    # Your code here", "timestamp": 1716000150.123456}, {"role": "assistant", "content": "def sum_list(numbers: list) -> int:\n    total = 0\n    for num in numbers:\n        total += num\n    return total", "timestamp": 1716000150.173456}], "metadata": {"expected_answer": {"name": "sum_list", "signature": "def sum_list(numbers: list) -> int:", "test_cases": [{"input": ([1, 2, 3, 4],), "output": 10}, {"input": ([],), "output": 0}, {"input": ([-1, 1],), "output": 0}], "solution": "def sum_list(numbers: list) -> int:\n    total = 0\n    for num in numbers:\n        total += num\n    return total"}}}
{"type": "code", "difficulty": 0.5, "conversation": [{"role": "user", "content": "Write a function `string_to_uppercase` that converts a string to uppercase.\ndef string_to_uppercase(s: str) -> str:\n    # Code here", "timestamp": 1716000165.234567}, {"role": "assistant", "content": "def string_to_uppercase(s: str) -> str:\n    return s.upper()", "timestamp": 1716000165.284567}], "metadata": {"expected_answer": {"name": "string_to_uppercase", "signature": "def string_to_uppercase(s: str) -> str:", "test_cases": [{"input": ("hello",), "output": "HELLO"}, {"input": ("Python123",), "output": "PYTHON123"}, {"input": ("",), "output": ""}], "solution": "def string_to_uppercase(s: str) -> str:\n    return s.upper()"}}}
{"type": "code", "difficulty": 0.7, "conversation": [{"role": "user", "content": "Implement a simple Python class `Dog` with an `_init_` method that takes a name and a `bark` method that returns 'Woof! My name is [name]'.\nclass Dog:\n    # Your code here", "timestamp": 1716000180.345678}, {"role": "assistant", "content": "class Dog:\n    def _init_(self, name: str):\n        self.name = name\n\n    def bark(self) -> str:\n        return \"Woof! My name is \" + self.name", "timestamp": 1716000180.395678}], "metadata": {"expected_answer": {"name": "Dog", "signature": "class Dog:", "test_cases": [{"setup": "my_dog = Dog(\"Buddy\")", "actions": ["my_dog.bark()"], "outputs": ["Woof! My name is Buddy"]}, {"setup": "another_dog = Dog(\"Lucy\")", "actions": ["another_dog.bark()"], "outputs": ["Woof! My name is Lucy"]}], "solution": "class Dog:\n    def _init_(self, name: str):\n        self.name = name\n\n    def bark(self) -> str:\n        return \"Woof! My name is \" + self.name"}}}
{"type": "code", "difficulty": 0.1, "conversation": [{"role": "user", "content": "Write a Python function `return_true` that always returns True.\ndef return_true() -> bool:\n    # Your code here", "timestamp": 1716000195.456789}, {"role": "assistant", "content": "def return_true() -> bool:\n    return True", "timestamp": 1716000195.506789}], "metadata": {"expected_answer": {"name": "return_true", "signature": "def return_true() -> bool:", "test_cases": [{"input": (), "output": true}], "solution": "def return_true() -> bool:\n    return True"}}}
{"type": "qa", "difficulty": 0.1, "conversation": [{"role": "user", "content": "What is the main color of a banana?", "timestamp": 1716000210.567890}, {"role": "assistant", "content": "The main color of a ripe banana is yellow.", "timestamp": 1716000210.617890}], "metadata": {"expected_answer": "The main color of a ripe banana is yellow."}}
{"type": "qa", "difficulty": 0.2, "conversation": [{"role": "user", "content": "How many days are in a week?", "timestamp": 1716000225.678901}, {"role": "assistant", "content": "There are seven days in a week.", "timestamp": 1716000225.728901}], "metadata": {"expected_answer": "There are seven days in a week."}}
{"type": "qa", "difficulty": 0.3, "conversation": [{"role": "user", "content": "What is the largest planet in our solar system?", "timestamp": 1716000240.789012}, {"role": "assistant", "content": "The largest planet in our solar system is Jupiter.", "timestamp": 1716000240.839012}], "metadata": {"expected_answer": "The largest planet in our solar system is Jupiter."}}
{"type": "qa", "difficulty": 0.4, "conversation": [{"role": "user", "content": "What do bees primarily collect from flowers?", "timestamp": 1716000255.890123}, {"role": "assistant", "content": "Bees primarily collect nectar and pollen from flowers.", "timestamp": 1716000255.940123}], "metadata": {"expected_answer": "Bees primarily collect nectar and pollen from flowers."}}
{"type": "qa", "difficulty": 0.5, "conversation": [{"role": "user", "content": "Briefly explain what an algorithm is.", "timestamp": 1716000270.901234}, {"role": "assistant", "content": "An algorithm is a set of step-by-step instructions or rules designed to solve a specific problem or perform a task.", "timestamp": 1716000270.951234}], "metadata": {"expected_answer": "An algorithm is a set of step-by-step instructions or rules designed to solve a specific problem or perform a task."}}
{"type": "qa", "difficulty": 0.2, "conversation": [{"role": "user", "content": "What is the chemical symbol for gold?", "timestamp": 1716000285.012345}, {"role": "assistant", "content": "The chemical symbol for gold is Au.", "timestamp": 1716000285.062345}], "metadata": {"expected_answer": "The chemical symbol for gold is Au."}}
{"type": "math", "difficulty": 0.4, "conversation": [{"role": "user", "content": "A rectangular field is 10 meters long and 5 meters wide. What is its perimeter in meters?", "timestamp": 1716000300.123456}, {"role": "assistant", "content": "30 meters", "timestamp": 1716000300.223456}], "metadata": {"expected_answer": 30}}
{"type": "code", "difficulty": 0.2, "conversation": [{"role": "user", "content": "Write a Python function `max_of_two` that returns the larger of two integers.\ndef max_of_two(a: int, b: int) -> int:\n    # Your code here", "timestamp": 1716000320.123456}, {"role": "assistant", "content": "def max_of_two(a: int, b: int) -> int:\n    if a > b:\n        return a\n    else:\n        return b", "timestamp": 1716000320.223456}], "metadata": {"expected_answer": {"name": "max_of_two", "signature": "def max_of_two(a: int, b: int) -> int:", "test_cases": [{"input": (3, 5), "output": 5}, {"input": (10, 2), "output": 10}, {"input": (7, 7), "output": 7}], "solution": "def max_of_two(a: int, b: int) -> int:\n    if a > b:\n        return a\n    else:\n        return b"}}}
{"type": "qa", "difficulty": 0.2, "conversation": [{"role": "user", "content": "What is H2O commonly known as?", "timestamp": 1716000340.123456}, {"role": "assistant", "content": "H2O is commonly known as water.", "timestamp": 1716000340.223456}], "metadata": {"expected_answer": "H2O is commonly known as water."}}
{"type": "math", "difficulty": 0.3, "conversation": [{"role": "user", "content": "John has 5 apples. He eats 2 and then buys 4 more. How many apples does John have now?", "timestamp": 1716000360.123456}, {"role": "assistant", "content": "7 apples", "timestamp": 1716000360.223456}], "metadata": {"expected_answer": 7}}
{"type": "code", "difficulty": 0.4, "conversation": [{"role": "user", "content": "Write a Python function `reverse_string` that takes a string and returns its reversed version.\ndef reverse_string(s: str) -> str:\n    # Your code here", "timestamp": 1716000380.123456}, {"role": "assistant", "content": "def reverse_string(s: str) -> str:\n    return s[::-1]", "timestamp": 1716000380.223456}], "metadata": {"expected_answer": {"name": "reverse_string", "signature": "def reverse_string(s: str) -> str:", "test_cases": [{"input": ("hello",), "output": "olleh"}, {"input": ("Python",), "output": "nohtyP"}, {"input": ("",), "output": ""}], "solution": "def reverse_string(s: str) -> str:\n    return s[::-1]"}}}
{"type": "qa", "difficulty": 0.4, "conversation": [{"role": "user", "content": "What force keeps planets in orbit around the Sun?", "timestamp": 1716000400.123456}, {"role": "assistant", "content": "Gravity is the force that keeps planets in orbit around the Sun.", "timestamp": 1716000400.223456}], "metadata": {"expected_answer": "Gravity is the force that keeps planets in orbit around the Sun."}}
{"type": "math", "difficulty": 0.1, "conversation": [{"role": "user", "content": "Calculate 15 - 8.", "timestamp": 1716000420.123456}, {"role": "assistant", "content": "7", "timestamp": 1716000420.223456}], "metadata": {"expected_answer": 7}}
{"type": "code", "difficulty": 0.3, "conversation": [{"role": "user", "content": "Implement `is_positive` function in Python. It should return True if a number is greater than 0.\ndef is_positive(num: int) -> bool:\n    # Your code here", "timestamp": 1716000440.123456}, {"role": "assistant", "content": "def is_positive(num: int) -> bool:\n    return num > 0", "timestamp": 1716000440.223456}], "metadata": {"expected_answer": {"name": "is_positive", "signature": "def is_positive(num: int) -> bool:", "test_cases": [{"input": (5,), "output": true}, {"input": (0,), "output": false}, {"input": (-3,), "output": false}], "solution": "def is_positive(num: int) -> bool:\n    return num > 0"}}}
{"type": "qa", "difficulty": 0.3, "conversation": [{"role": "user", "content": "What are the three primary colors of light?", "timestamp": 1716000460.123456}, {"role": "assistant", "content": "The three primary colors of light are red green and blue (RGB).", "timestamp": 1716000460.223456}], "metadata": {"expected_answer": "The three primary colors of light are red green and blue (RGB)."}}
{"type": "math", "difficulty": 0.5, "conversation": [{"role": "user", "content": "A train travels 180 km in 3 hours. What is its average speed in km/h?", "timestamp": 1716000480.123456}, {"role": "assistant", "content": "60 km/h", "timestamp": 1716000480.223456}], "metadata": {"expected_answer": 60.0}}
{"type": "code", "difficulty": 0.6, "conversation": [{"role": "user", "content": "Create a Python function `concatenate_strings` that takes two strings and joins them.\ndef concatenate_strings(s1: str, s2: str) -> str:\n    # Your code here", "timestamp": 1716000500.123456}, {"role": "assistant", "content": "def concatenate_strings(s1: str, s2: str) -> str:\n    return s1 + s2", "timestamp": 1716000500.223456}], "metadata": {"expected_answer": {"name": "concatenate_strings", "signature": "def concatenate_strings(s1: str, s2: str) -> str:", "test_cases": [{"input": ("hello", "world"), "output": "helloworld"}, {"input": ("bit", "zero"), "output": "bitzero"}, {"input": ("", "test"), "output": "test"}], "solution": "def concatenate_strings(s1: str, s2: str) -> str:\n    return s1 + s2"}}}
{"type": "qa", "difficulty": 0.6, "conversation": [{"role": "user", "content": "Briefly explain what a CPU (Central Processing Unit) does in a computer.", "timestamp": 1716000520.123456}, {"role": "assistant", "content": "A CPU is the primary component of a computer that executes instructions. It performs arithmetic logic controlling and input/output (I/O) operations specified by the instructions.", "timestamp": 1716000520.223456}], "metadata": {"expected_answer": "A CPU is the primary component of a computer that executes instructions. It performs arithmetic logic controlling and input/output (I/O) operations specified by the instructions."}}
{"type": "math", "difficulty": 0.3, "conversation": [{"role": "user", "content": "What is 25% of 200?", "timestamp": 1716000540.123456}, {"role": "assistant", "content": "50.0", "timestamp": 1716000540.223456}], "metadata": {"expected_answer": 50.0}}
{"type": "code", "difficulty": 0.7, "conversation": [{"role": "user", "content": "Implement a Python function `factorial_iterative` that calculates factorial of n using a loop. Assume n is non-negative.\ndef factorial_iterative(n: int) -> int:\n    # Your code here", "timestamp": 1716000560.123456}, {"role": "assistant", "content": "def factorial_iterative(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "timestamp": 1716000560.223456}], "metadata": {"expected_answer": {"name": "factorial_iterative", "signature": "def factorial_iterative(n: int) -> int:", "test_cases": [{"input": (5,), "output": 120}, {"input": (0,), "output": 1}, {"input": (1,), "output": 1}, {"input": (3,), "output": 6}], "solution": "def factorial_iterative(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"}}}
{"type": "qa", "difficulty": 0.5, "conversation": [{"role": "user", "content": "What is the main function of the human heart?", "timestamp": 1716000580.123456}, {"role": "assistant", "content": "The main function of the human heart is to pump blood throughout the body supplying oxygen and nutrients to tissues and removing carbon dioxide and other wastes.", "timestamp": 1716000580.223456}], "metadata": {"expected_answer": "The main function of the human heart is to pump blood throughout the body supplying oxygen and nutrients to tissues and removing carbon dioxide and other wastes."}}
{"type": "math", "difficulty": 0.6, "conversation": [{"role": "user", "content": "Solve for y: 2y + 5 = 3y - 2", "timestamp": 1716000600.123456}, {"role": "assistant", "content": "7.0", "timestamp": 1716000600.223456}], "metadata": {"expected_answer": 7.0}}
{"type": "code", "difficulty": 0.8, "conversation": [{"role": "user", "content": "Implement `is_palindrome` in Python. It checks if a string reads the same forwards and backwards (case-sensitive).\ndef is_palindrome(text: str) -> bool:\n    # Your code here", "timestamp": 1716000620.123456}, {"role": "assistant", "content": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "timestamp": 1716000620.223456}], "metadata": {"expected_answer": {"name": "is_palindrome", "signature": "def is_palindrome(text: str) -> bool:", "test_cases": [{"input": ("madam",), "output": true}, {"input": ("racecar",), "output": true}, {"input": ("hello",), "output": false}, {"input": ("A",), "output": true}, {"input": ("",), "output": true}], "solution": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"}}}
{"type": "qa", "difficulty": 0.7, "conversation": [{"role": "user", "content": "Explain the difference between RAM and ROM in a computer in one or two sentences.", "timestamp": 1716000640.123456}, {"role": "assistant", "content": "RAM (Random Access Memory) is volatile memory for active tasks and data the CPU is using. ROM (Read-Only Memory) is non-volatile memory storing firmware or startup instructions.", "timestamp": 1716000640.223456}], "metadata": {"expected_answer": "RAM (Random Access Memory) is volatile memory used for active tasks and data the CPU is currently working with. ROM (Read-Only Memory) is non-volatile memory that stores firmware or startup instructions."}}
{"type": "math", "difficulty": 0.4, "conversation": [{"role": "user", "content": "What is the square root of 144?", "timestamp": 1716000660.123456}, {"role": "assistant", "content": "12.0", "timestamp": 1716000660.223456}], "metadata": {"expected_answer": 12.0}}
{"type": "code", "difficulty": 0.5, "conversation": [{"role": "user", "content": "Write a Python function `get_length` that returns the length of a list.\ndef get_length(items: list) -> int:\n    # Your code here", "timestamp": 1716000680.123456}, {"role": "assistant", "content": "def get_length(items: list) -> int:\n    return len(items)", "timestamp": 1716000680.223456}], "metadata": {"expected_answer": {"name": "get_length", "signature": "def get_length(items: list) -> int:", "test_cases": [{"input": ([1, 2, 3, 4],), "output": 4}, {"input": ([],), "output": 0}, {"input": (['a', 'b'],), "output": 2}], "solution": "def get_length(items: list) -> int:\n    return len(items)"}}}
{"type": "qa", "difficulty": 0.1, "conversation": [{"role": "user", "content": "Which gas do humans breathe out?", "timestamp": 1716000700.123456}, {"role": "assistant", "content": "Humans breathe out carbon dioxide.", "timestamp": 1716000700.223456}], "metadata": {"expected_answer": "Humans breathe out carbon dioxide."}}
{"type": "math", "difficulty": 0.2, "conversation": [{"role": "user", "content": "If a book costs $15 and you pay with a $20 bill how much change do you get?", "timestamp": 1716000720.123456}, {"role": "assistant", "content": "$5.00", "timestamp": 1716000720.223456}], "metadata": {"expected_answer": 5.00}}
{"type": "code", "difficulty": 0.3, "conversation": [{"role": "user", "content": "Write a Python function `is_even` that returns True if a number is even False otherwise.\ndef is_even(num: int) -> bool:\n    # Your code here", "timestamp": 1716000740.123456}, {"role": "assistant", "content": "def is_even(num: int) -> bool:\n    return num % 2 == 0", "timestamp": 1716000740.223456}], "metadata": {"expected_answer": {"name": "is_even", "signature": "def is_even(num: int) -> bool:", "test_cases": [{"input": (4,), "output": true}, {"input": (7,), "output": false}, {"input": (0,), "output": true}, {"input": (-2,), "output": true}], "solution": "def is_even(num: int) -> bool:\n    return num % 2 == 0"}}}
{"type": "qa", "difficulty": 0.4, "conversation": [{"role": "user", "content": "What is the process by which plants make their own food called?", "timestamp": 1716000760.123456}, {"role": "assistant", "content": "The process by which plants make their own food is called photosynthesis.", "timestamp": 1716000760.223456}], "metadata": {"expected_answer": "The process by which plants make their own food is called photosynthesis."}}
{"type": "math", "difficulty": 0.5, "conversation": [{"role": "user", "content": "A pizza is cut into 8 slices. If you eat 3 slices what fraction of the pizza is left?", "timestamp": 1716000780.123456}, {"role": "assistant", "content": "5/8", "timestamp": 1716000780.223456}], "metadata": {"expected_answer": "5/8"}}
{"type": "code", "difficulty": 0.6, "conversation": [{"role": "user", "content": "Create a Python function `find_max_in_list` that returns the maximum number in a list of numbers. Assume list is not empty.\ndef find_max_in_list(numbers: list) -> int:\n    # Your code here", "timestamp": 1716000800.123456}, {"role": "assistant", "content": "def find_max_in_list(numbers: list) -> int:\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num", "timestamp": 1716000800.223456}], "metadata": {"expected_answer": {"name": "find_max_in_list", "signature": "def find_max_in_list(numbers: list) -> int:", "test_cases": [{"input": ([1, 5, 2, 8, 3],), "output": 8}, {"input": ([-1, -5, -2],), "output": -1}, {"input": ([10],), "output": 10}], "solution": "def find_max_in_list(numbers: list) -> int:\n    max_num = numbers[0]\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n    return max_num"}}}
{"type": "qa", "difficulty": 0.3, "conversation": [{"role": "user", "content": "What is the boiling point of water in Celsius at standard atmospheric pressure?", "timestamp": 1716000820.123456}, {"role": "assistant", "content": "The boiling point of water is 100 degrees Celsius at standard atmospheric pressure.", "timestamp": 1716000820.223456}], "metadata": {"expected_answer": "The boiling point of water is 100 degrees Celsius at standard atmospheric pressure."}}
{"type": "math", "difficulty": 0.1, "conversation": [{"role": "user", "content": "What is 3 multiplied by 4?", "timestamp": 1716000840.123456}, {"role": "assistant", "content": "12", "timestamp": 1716000840.223456}], "metadata": {"expected_answer": 12}}
{"type": "code", "difficulty": 0.2, "conversation": [{"role": "user", "content": "Write a Python function `say_hello` that takes a name (string) and returns 'Hello [name]!'.\ndef say_hello(name: str) -> str:\n    # Your code here", "timestamp": 1716000860.123456}, {"role": "assistant", "content": "def say_hello(name: str) -> str:\n    return \"Hello \" + name + \"!\"", "timestamp": 1716000860.223456}], "metadata": {"expected_answer": {"name": "say_hello", "signature": "def say_hello(name: str) -> str:", "test_cases": [{"input": ("Alice",), "output": "Hello Alice!"}, {"input": ("Bob",), "output": "Hello Bob!"}, {"input": ("",), "output": "Hello !"}], "solution": "def say_hello(name: str) -> str:\n    return \"Hello \" + name + \"!\""}}}
{"type": "qa", "difficulty": 0.2, "conversation": [{"role": "user", "content": "How many sides does a triangle have?", "timestamp": 1716000880.123456}, {"role": "assistant", "content": "A triangle has three sides.", "timestamp": 1716000880.223456}], "metadata": {"expected_answer": "A triangle has three sides."}}
{"type": "math", "difficulty": 0.4, "conversation": [{"role": "user", "content": "If you run for 30 minutes at 10 km/h how far do you run in km?", "timestamp": 1716000900.123456}, {"role": "assistant", "content": "5.0 km", "timestamp": 1716000900.223456}], "metadata": {"expected_answer": 5.0}}
{"type": "code", "difficulty": 0.5, "conversation": [{"role": "user", "content": "Write a Python function `absolute_value` that returns the absolute value of a number.\ndef absolute_value(num: float) -> float:\n    # Your code here", "timestamp": 1716000920.123456}, {"role": "assistant", "content": "def absolute_value(num: float) -> float:\n    if num < 0:\n        return -num\n    return num", "timestamp": 1716000920.223456}], "metadata": {"expected_answer": {"name": "absolute_value", "signature": "def absolute_value(num: float) -> float:", "test_cases": [{"input": (5.0,), "output": 5.0}, {"input": (-3.5,), "output": 3.5}, {"input": (0.0,), "output": 0.0}], "solution": "def absolute_value(num: float) -> float:\n    if num < 0:\n        return -num\n    return num"}}}
{"type": "qa", "difficulty": 0.5, "conversation": [{"role": "user", "content": "What is the primary purpose of a web browser?", "timestamp": 1716000940.123456}, {"role": "assistant", "content": "The primary purpose of a web browser is to retrieve present and traverse information resources on the World Wide Web such as web pages images and videos.", "timestamp": 1716000940.223456}], "metadata": {"expected_answer": "The primary purpose of a web browser is to retrieve present and traverse information resources on the World Wide Web such as web pages images and videos."}}
{"type": "math", "difficulty": 0.3, "conversation": [{"role": "user", "content": "Solve for x: x / 4 = 5", "timestamp": 1716000960.123456}, {"role": "assistant", "content": "20.0", "timestamp": 1716000960.223456}], "metadata": {"expected_answer": 20.0}}
{"type": "code", "difficulty": 0.7, "conversation": [{"role": "user", "content": "Implement a Python function `count_occurrences` that counts how many times a specific element appears in a list.\ndef count_occurrences(data_list: list, element: any) -> int:\n    # Your code here", "timestamp": 1716000980.123456}, {"role": "assistant", "content": "def count_occurrences(data_list: list, element: any) -> int:\n    count = 0\n    for item in data_list:\n        if item == element:\n            count += 1\n    return count", "timestamp": 1716000980.223456}], "metadata": {"expected_answer": {"name": "count_occurrences", "signature": "def count_occurrences(data_list: list, element: any) -> int:", "test_cases": [{"input": ([1, 2, 2, 3, 2], 2), "output": 3}, {"input": (['a', 'b', 'a', 'c'], 'a'), "output": 2}, {"input": ([1, 2, 3], 4), "output": 0}, {"input": ([], 1), "output": 0}], "solution": "def count_occurrences(data_list: list, element: any) -> int:\n    count = 0\n    for item in data_list:\n        if item == element:\n            count += 1\n    return count"}}}
{"type": "qa", "difficulty": 0.6, "conversation": [{"role": "user", "content": "What is an API (Application Programming Interface)? Explain briefly.", "timestamp": 1716001000.123456}, {"role": "assistant", "content": "An API is a set of rules and protocols that allows different software applications to communicate and exchange data with each other. It defines how requests and responses should be formatted.", "timestamp": 1716001000.223456}], "metadata": {"expected_answer": "An API is a set of rules and protocols that allows different software applications to communicate and exchange data with each other. It defines how requests and responses should be formatted."}}
{"type": "math", "difficulty": 0.6, "conversation": [{"role": "user", "content": "A car's price is $15000. If sales tax is 8% what is the total cost?", "timestamp": 1716001020.123456}, {"role": "assistant", "content": "$16200.00", "timestamp": 1716001020.223456}], "metadata": {"expected_answer": 16200.00}}
{"type": "code", "difficulty": 0.8, "conversation": [{"role": "user", "content": "Write a Python function `merge_sorted_lists` that merges two sorted lists into a single sorted list.\ndef merge_sorted_lists(list1: list, list2: list) -> list:\n    # Your code here. You can assume inputs are sorted lists of numbers.", "timestamp": 1716001040.123456}, {"role": "assistant", "content": "def merge_sorted_lists(list1: list, list2: list) -> list:\n    result = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    result.extend(list1[i:])\n    result.extend(list2[j:])\n    return result", "timestamp": 1716001040.223456}], "metadata": {"expected_answer": {"name": "merge_sorted_lists", "signature": "def merge_sorted_lists(list1: list, list2: list) -> list:", "test_cases": [{"input": ([1, 3, 5], [2, 4, 6]), "output": [1, 2, 3, 4, 5, 6]}, {"input": ([1, 2], [3, 4]), "output": [1, 2, 3, 4]}, {"input": ([], [1, 2]), "output": [1, 2]}, {"input": ([1, 5], []), "output": [1, 5]}], "solution": "def merge_sorted_lists(list1: list, list2: list) -> list:\n    result = []\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    result.extend(list1[i:])\n    result.extend(list2[j:])\n    return result"}}}
{"type": "qa", "difficulty": 0.7, "conversation": [{"role": "user", "content": "What is the difference between HTTP and HTTPS?", "timestamp": 1716001060.123456}, {"role": "assistant", "content": "HTTP (Hypertext Transfer Protocol) is the standard protocol for web communication. HTTPS (HTTP Secure) is the secure version of HTTP where communications are encrypted using SSL/TLS for security.", "timestamp": 1716001060.223456}], "metadata": {"expected_answer": "HTTP (Hypertext Transfer Protocol) is the standard protocol for web communication. HTTPS (HTTP Secure) is the secure version of HTTP where communications are encrypted using SSL/TLS for security."}}
{"type": "math", "difficulty": 0.4, "conversation": [{"role": "user", "content": "Calculate the area of a triangle with base 10 units and height 5 units.", "timestamp": 1716001080.123456}, {"role": "assistant", "content": "25.0 square units", "timestamp": 1716001080.223456}], "metadata": {"expected_answer": 25.0}}
{"type": "qa", "difficulty": 0.5, "conversation": [{"role": "user", "content": "What does the 'Seventh Generation Principle' mean in some indigenous philosophies?", "timestamp": 1716001100.123456}, {"role": "assistant", "content": "The Seventh Generation Principle suggests that decisions made today should result in a sustainable world seven generations into the future. It emphasizes long-term thinking and interconnectedness.", "timestamp": 1716001100.223456}], "metadata": {"expected_answer": "The Seventh Generation Principle suggests that decisions made today should result in a sustainable world seven generations into the future. It emphasizes long-term thinking and interconnectedness."}}
{"type": "math", "difficulty": 0.5, "conversation": [{"role": "user", "content": "A community garden harvests 120 potatoes. They decide to share them equally among 6 families but first set aside 1/4 of the potatoes for elders. How many potatoes does each family receive?", "timestamp": 1716001120.123456}, {"role": "assistant", "content": "Each family receives 15 potatoes.", "timestamp": 1716001120.223456}], "metadata": {"expected_answer": 15}}
{"type": "code", "difficulty": 0.4, "conversation": [{"role": "user", "content": "Write a Python function `greet_person` that takes a name and returns a greeting like 'Kia ora [name]!'.\ndef greet_person(name: str) -> str:\n    # Your code here", "timestamp": 1716001140.123456}, {"role": "assistant", "content": "def greet_person(name: str) -> str:\n    return \"Kia ora \" + name + \"!\"", "timestamp": 1716001140.223456}], "metadata": {"expected_answer": {"name": "greet_person", "signature": "def greet_person(name: str) -> str:", "test_cases": [{"input": ("Moana",), "output": "Kia ora Moana!"}, {"input": ("Maui",), "output": "Kia ora Maui!"}], "solution": "def greet_person(name: str) -> str:\n    return \"Kia ora \" + name + \"!\""}}}
{"type": "qa", "difficulty": 0.4, "conversation": [{"role": "user", "content": "What are the 'Three Sisters' in traditional Native American agriculture?", "timestamp": 1716001160.123456}, {"role": "assistant", "content": "The 'Three Sisters' are corn beans and squash grown together. Corn provides a stalk for beans beans provide nitrogen and squash shades the ground reducing weeds and retaining moisture.", "timestamp": 1716001160.223456}], "metadata": {"expected_answer": "The 'Three Sisters' in traditional Native American agriculture are corn beans and squash grown together in a companion planting system. The corn provides a stalk for the beans to climb the beans provide nitrogen to the soil and the squash provides ground cover to reduce weeds and retain moisture."}}
{"type": "math", "difficulty": 0.2, "conversation": [{"role": "user", "content": "If there are 4 directions (North East South West) and you make 2 turns what is 4 to the power of 2?", "timestamp": 1716001180.123456}, {"role": "assistant", "content": "16", "timestamp": 1716001180.223456}], "metadata": {"expected_answer": 16}}
{"type": "code", "difficulty": 0.6, "conversation": [{"role": "user", "content": "Implement a Python function `calculate_average_score` for a list of scores (numbers).\ndef calculate_average_score(scores: list) -> float:\n    # Return 0 if the list is empty. Your code here.", "timestamp": 1716001200.123456}, {"role": "assistant", "content": "def calculate_average_score(scores: list) -> float:\n    if not scores:\n        return 0.0\n    return sum(scores) / len(scores)", "timestamp": 1716001200.223456}], "metadata": {"expected_answer": {"name": "calculate_average_score", "signature": "def calculate_average_score(scores: list) -> float:", "test_cases": [{"input": ([10, 20, 30],), "output": 20.0}, {"input": ([5, 5, 5, 5],), "output": 5.0}, {"input": ([],), "output": 0.0}, {"input": ([100],), "output": 100.0}], "solution": "def calculate_average_score(scores: list) -> float:\n    if not scores:\n        return 0.0\n    return sum(scores) / len(scores)"}}}
{"type": "qa", "difficulty": 0.3, "conversation": [{"role": "user", "content": "What is a 'talking circle' in some indigenous traditions?", "timestamp": 1716001220.123456}, {"role": "assistant", "content": "A talking circle is a traditional way for indigenous peoples to discuss issues. Only the person holding a talking piece (like a feather or stone) speaks ensuring everyone is heard respectfully.", "timestamp": 1716001220.223456}], "metadata": {"expected_answer": "A talking circle is a traditional way for indigenous peoples to discuss issues. Only the person holding a talking piece (like a feather or stone) speaks ensuring everyone is heard respectfully."}}
{"type": "math", "difficulty": 0.7, "conversation": [{"role": "user", "content": "A canoe travels 24 km downstream in 3 hours and 10 km upstream in 5 hours. What is the speed of the canoe in still water (km/h)?", "timestamp": 1716001240.123456}, {"role": "assistant", "content": "5.0 km/h", "timestamp": 1716001240.223456}], "metadata": {"expected_answer": 5.0}}
{"type": "code", "difficulty": 0.5, "conversation": [{"role": "user", "content": "Write a Python function `filter_long_words` that takes a list of strings and an integer n. It returns a new list containing only words longer than n.\ndef filter_long_words(words: list, n: int) -> list:\n    # Your code here", "timestamp": 1716001260.123456}, {"role": "assistant", "content": "def filter_long_words(words: list, n: int) -> list:\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words", "timestamp": 1716001260.223456}], "metadata": {"expected_answer": {"name": "filter_long_words", "signature": "def filter_long_words(words: list, n: int) -> list:", "test_cases": [{"input": (["apple", "banana", "kiwi", "grape"], 4), "output": ["apple", "banana", "grape"]}, {"input": (["cat", "dog", "elephant"], 3), "output": ["elephant"]}, {"input": (["short", "words"], 10), "output": []}], "solution": "def filter_long_words(words: list, n: int) -> list:\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"}}}
{"type": "qa", "difficulty": 0.6, "conversation": [{"role": "user", "content": "What is the significance of storytelling in many indigenous cultures?", "timestamp": 1716001280.123456}, {"role": "assistant", "content": "Storytelling in many indigenous cultures is vital for passing down history traditions values teachings and spiritual beliefs from one generation to the next. It strengthens community and connection to the land.", "timestamp": 1716001280.223456}], "metadata": {"expected_answer": "Storytelling in many indigenous cultures is vital for passing down history traditions values teachings and spiritual beliefs from one generation to the next. It strengthens community and connection to the land."}}
{"type": "math", "difficulty": 0.3, "conversation": [{"role": "user", "content": "A circular weaving pattern has a radius of 7 cm. What is its approximate area? Use pi = 3.14.", "timestamp": 1716001300.123456}, {"role": "assistant", "content": "153.86 square cm", "timestamp": 1716001300.223456}], "metadata": {"expected_answer": 153.86}}
{"type": "code", "difficulty": 0.4, "conversation": [{"role": "user", "content": "Write a Python function `find_element_index` that returns the index of the first occurrence of an element in a list or -1 if not found.\ndef find_element_index(items: list, target: any) -> int:\n    # Your code here", "timestamp": 1716001320.123456}, {"role": "assistant", "content": "def find_element_index(items: list, target: any) -> int:\n    try:\n        return items.index(target)\n    except ValueError:\n        return -1", "timestamp": 1716001320.223456}], "metadata": {"expected_answer": {"name": "find_element_index", "signature": "def find_element_index(items: list, target: any) -> int:", "test_cases": [{"input": ([10, 20, 30, 40], 30), "output": 2}, {"input": (['a', 'b', 'c'], 'd'), "output": -1}, {"input": ([1, 1, 2], 1), "output": 0}], "solution": "def find_element_index(items: list, target: any) -> int:\n    try:\n        return items.index(target)\n    except ValueError:\n        return -1"}}}
{"type": "qa", "difficulty": 0.5, "conversation": [{"role": "user", "content": "Briefly describe the concept of 'mana' in Polynesian cultures.", "timestamp": 1716001340.123456}, {"role": "assistant", "content": "'Mana' is a concept in Polynesian cultures referring to a spiritual life force energy or healing power that can exist in people objects and places. It implies influence authority and efficacy.", "timestamp": 1716001340.223456}], "metadata": {"expected_answer": "'Mana' is a concept in Polynesian cultures referring to a spiritual life force energy or healing power that can exist in people objects and places. It implies influence authority and efficacy."}}
{"type": "math", "difficulty": 0.6, "conversation": [{"role": "user", "content": "A traditional lodge frame uses 12 poles each 3.5 meters long. What is the total length of poles needed in meters?", "timestamp": 1716001360.123456}, {"role": "assistant", "content": "42.0 meters", "timestamp": 1716001360.223456}], "metadata": {"expected_answer": 42.0}}
{"type": "code", "difficulty": 0.7, "conversation": [{"role": "user", "content": "Create a Python class `ResourceTracker` with methods `add_resource(item, quantity)` and `get_quantity(item)`. It should store resource counts.\nclass ResourceTracker:\n    # Your code here. Initialize with an empty dictionary for resources.", "timestamp": 1716001380.123456}, {"role": "assistant", "content": "class ResourceTracker:\n    def _init_(self):\n        self.resources = {}\n\n    def add_resource(self, item: str, quantity: int):\n        self.resources[item] = self.resources.get(item, 0) + quantity\n\n    def get_quantity(self, item: str) -> int:\n        return self.resources.get(item, 0)", "timestamp": 1716001380.223456}], "metadata": {"expected_answer": {"name": "ResourceTracker", "signature": "class ResourceTracker:", "test_cases": [{"setup": "tracker = ResourceTracker()", "actions": ["tracker.add_resource(\"wood\", 10)", "tracker.add_resource(\"stone\", 5)", "tracker.add_resource(\"wood\", 3)", "tracker.get_quantity(\"wood\")", "tracker.get_quantity(\"stone\")", "tracker.get_quantity(\"food\")"], "outputs": [null, null, null, 13, 5, 0]}], "solution": "class ResourceTracker:\n    def _init_(self):\n        self.resources = {}\n\n    def add_resource(self, item: str, quantity: int):\n        self.resources[item] = self.resources.get(item, 0) + quantity\n\n    def get_quantity(self, item: str) -> int:\n        return self.resources.get(item, 0)"}}}
{"type": "qa", "difficulty": 0.4, "conversation": [{"role": "user", "content": "What is a common characteristic of indigenous art from the Pacific Northwest Coast of North America?", "timestamp": 1716001400.123456}, {"role": "assistant", "content": "A common characteristic is the use of formline design which emphasizes continuous flowing curvilinear lines creating stylized figures of animals humans and mythical beings often in bold colors like red and black.", "timestamp": 1716001400.223456}], "metadata": {"expected_answer": "A common characteristic of indigenous art from the Pacific Northwest Coast of North America is the use of formline design. This style emphasizes continuous flowing curvilinear lines to create stylized figures of animals humans and mythical beings often in bold colors like red and black."}}
{"type": "math", "difficulty": 0.4, "conversation": [{"role": "user", "content": "If a storyteller shares 3 stories each lasting 15 minutes how long is the total storytelling time in hours?", "timestamp": 1716001420.123456}, {"role": "assistant", "content": "0.75 hours", "timestamp": 1716001420.223456}], "metadata": {"expected_answer": 0.75}}
{"type": "code", "difficulty": 0.3, "conversation": [{"role": "user", "content": "Write a Python function `is_string_empty` that returns True if a string is empty False otherwise.\ndef is_string_empty(s: str) -> bool:\n    # Your code here", "timestamp": 1716001440.123456}, {"role": "assistant", "content": "def is_string_empty(s: str) -> bool:\n    return len(s) == 0", "timestamp": 1716001440.223456}], "metadata": {"expected_answer": {"name": "is_string_empty", "signature": "def is_string_empty(s: str) -> bool:", "test_cases": [{"input": ("",), "output": true}, {"input": ("hello",), "output": false}, {"input": " ",), "output": false}], "solution": "def is_string_empty(s: str) -> bool:\n    return len(s) == 0"}}}
{"type": "qa", "difficulty": 0.5, "conversation": [{"role": "user", "content": "What is the 'Dreamtime' or 'The Dreaming' in Australian Aboriginal beliefs?", "timestamp": 1716001460.123456}, {"role": "assistant", "content": "The Dreamtime is a fundamental concept in Australian Aboriginal spirituality. It describes a sacred era of creation when ancestral beings formed the land people animals and laws. It continues to influence life and culture.", "timestamp": 1716001460.223456}], "metadata": {"expected_answer": "The Dreamtime or The Dreaming is a fundamental concept in Australian Aboriginal spirituality. It describes a sacred era of creation when ancestral beings formed the land people animals and laws. It continues to influence life and culture."}}
{"type": "math", "difficulty": 0.5, "conversation": [{"role": "user", "content": "A community shares 3 salmon equally among 4 families. What fraction of a salmon does each family get?", "timestamp": 1716001480.123456}, {"role": "assistant", "content": "3/4 of a salmon", "timestamp": 1716001480.223456}], "metadata": {"expected_answer": "3/4"}}
{"type": "math", "difficulty": 0.4, "conversation": [{"role": "user", "content": "If 5 berries are shared by 2 people such that one person gets one more berry than the other how many berries does each person get?", "timestamp": 1716001500.123456}, {"role": "assistant", "content": "One person gets 3 berries the other gets 2 berries.", "timestamp": 1716001500.223456}], "metadata": {"expected_answer": "3 and 2"}}
{"type": "code", "difficulty": 0.3, "conversation": [{"role": "user", "content": "Write a Python function `list_contains_value` that checks if a list `elements` contains a specific `value`.\ndef list_contains_value(elements: list, value: any) -> bool:\n    # Your code here", "timestamp": 1716001520.123456}, {"role": "assistant", "content": "def list_contains_value(elements: list, value: any) -> bool:\n    return value in elements", "timestamp": 1716001520.223456}], "metadata": {"expected_answer": {"name": "list_contains_value", "signature": "def list_contains_value(elements: list, value: any) -> bool:", "test_cases": [{"input": ([1, 2, 3], 2), "output": true}, {"input": (['a', 'b'], 'c'), "output": false}, {"input": ([], 1), "output": false}], "solution": "def list_contains_value(elements: list, value: any) -> bool:\n    return value in elements"}}}
{"type": "qa", "difficulty": 0.4, "conversation": [{"role": "user", "content": "What does the Lakota phrase 'Aho Mitakuye Oyasin' mean?", "timestamp": 1716001540.123456}, {"role": "assistant", "content": "'Aho Mitakuye Oyasin' is a Lakota phrase meaning 'All my relations' or 'We are all related' acknowledging the interconnectedness of all life.", "timestamp": 1716001540.223456}], "metadata": {"expected_answer": "'Aho Mitakuye Oyasin' is a Lakota phrase meaning 'All my relations' or 'We are all related' acknowledging the interconnectedness of all life."}}
{"type": "math", "difficulty": 0.1, "conversation": [{"role": "user", "content": "What is 100 divided by 4?", "timestamp": 1716001560.123456}, {"role": "assistant", "content": "25.0", "timestamp": 1716001560.223456}], "metadata": {"expected_answer": 25.0}}
{"type": "code", "difficulty": 0.4, "conversation": [{"role": "user", "content": "Given class Person:\nclass Person:\n  def _init_(self, name: str):\n    self.name = name\n\nComplete the class by adding a method `get_name(self) -> str` that returns `self.name`.", "timestamp": 1716001580.123456}, {"role": "assistant", "content": "class Person:\n  def _init_(self, name: str):\n    self.name = name\n\n  def get_name(self) -> str:\n    return self.name", "timestamp": 1716001580.223456}], "metadata": {"expected_answer": {"name": "Person", "signature": "class Person:", "test_cases": [{"setup": "p = Person(\"Kainoa\")", "actions": ["p.get_name()"], "outputs": ["Kainoa"]}, {"setup": "p2 = Person(\"Leilani\")", "actions": ["p2.get_name()"], "outputs": ["Leilani"]}], "solution": "class Person:\n  def _init_(self, name: str):\n    self.name = name\n\n  def get_name(self) -> str:\n    return self.name"}}}
{"type": "qa", "difficulty": 0.2, "conversation": [{"role": "user", "content": "What is the primary gas in Earths atmosphere by percentage?", "timestamp": 1716001600.123456}, {"role": "assistant", "content": "Nitrogen is the primary gas in Earths atmosphere comprising about 78%.", "timestamp": 1716001600.223456}], "metadata": {"expected_answer": "Nitrogen is the primary gas in Earths atmosphere comprising about 78%."}}
{"type": "math", "difficulty": 0.3, "conversation": [{"role": "user", "content": "Calculate the area of a circle with a radius of 2 units. Use pi = 3.14.", "timestamp": 1716001620.123456}, {"role": "assistant", "content": "12.56 square units", "timestamp": 1716001620.223456}], "metadata": {"expected_answer": 12.56}}
{"type": "code", "difficulty": 0.4, "conversation": [{"role": "user", "content": "Write a Python function `get_first_character` that returns the first character of a string `s`. If `s` is empty return an empty string.\ndef get_first_character(s: str) -> str:\n    # Your code here", "timestamp": 1716001640.123456}, {"role": "assistant", "content": "def get_first_character(s: str) -> str:\n    if s:\n        return s[0]\n    return \"\"", "timestamp": 1716001640.223456}], "metadata": {"expected_answer": {"name": "get_first_character", "signature": "def get_first_character(s: str) -> str:", "test_cases": [{"input": ("hello",), "output": "h"}, {"input": ("",), "output": ""}, {"input": ("A",), "output": "A"}], "solution": "def get_first_character(s: str) -> str:\n    if s:\n        return s[0]\n    return \"\""}}}
{"type": "qa", "difficulty": 0.5, "conversation": [{"role": "user", "content": "Briefly what is the core idea of the 'Ubuntu' philosophy prominent in Southern Africa?", "timestamp": 1716001660.123456}, {"role": "assistant", "content": "Ubuntu emphasizes 'I am because we are' highlighting interconnectedness community and shared humanity. It values compassion mutual respect and collective well-being.", "timestamp": 1716001660.223456}], "metadata": {"expected_answer": "Ubuntu is an African philosophy that emphasizes 'I am because we are' highlighting interconnectedness community and shared humanity. It values compassion mutual respect and collective well-being."}}
{"type": "math", "difficulty": 0.4, "conversation": [{"role": "user", "content": "A craftsperson sells a carving for $50. Their material cost was $10. What percentage of the selling price was the material cost?", "timestamp": 1716001680.123456}, {"role": "assistant", "content": "20.0%", "timestamp": 1716001680.223456}], "metadata": {"expected_answer": 20.0}}
{"type": "code", "difficulty": 0.6, "conversation": [{"role": "user", "content": "Python function `dict_has_key_value(d: dict, key: str, value: any) -> bool`. Return True if dict `d` has `key` and `d[key]` is equal to `value` False otherwise.\n# Your code here", "timestamp": 1716001700.123456}, {"role": "assistant", "content": "def dict_has_key_value(d: dict, key: str, value: any) -> bool:\n    return key in d and d[key] == value", "timestamp": 1716001700.223456}], "metadata": {"expected_answer": {"name": "dict_has_key_value", "signature": "def dict_has_key_value(d: dict, key: str, value: any) -> bool:", "test_cases": [{"input": ({"name": "Mana", "age": 30}, "name", "Mana"), "output": true}, {"input": ({"name": "Mana", "age": 30}, "age", 25), "output": false}, {"input": ({"city": "Aotearoa"}, "country", "NZ"), "output": false}], "solution": "def dict_has_key_value(d: dict, key: str, value: any) -> bool:\n    return key in d and d[key] == value"}}}
{"type": "qa", "difficulty": 0.5, "conversation": [{"role": "user", "content": "Why is the sky blue on a clear day?", "timestamp": 1716001720.123456}, {"role": "assistant", "content": "The sky appears blue because air molecules scatter shorter blue wavelengths of sunlight more than other colors. This phenomenon is called Rayleigh scattering.", "timestamp": 1716001720.223456}], "metadata": {"expected_answer": "The sky appears blue because air molecules scatter shorter blue wavelengths of sunlight more than other colors. This phenomenon is called Rayleigh scattering."}}
{"type": "math", "difficulty": 0.2, "conversation": [{"role": "user", "content": "Solve for a: 3a + 2 = 11", "timestamp": 1716001740.123456}, {"role": "assistant", "content": "3.0", "timestamp": 1716001740.223456}], "metadata": {"expected_answer": 3.0}}
{"type": "code", "difficulty": 0.5, "conversation": [{"role": "user", "content": "Write Python function `get_squares_up_to_n(n: int) -> list` returning squares of numbers from 0 to n (inclusive) using list comprehension.\ndef get_squares_up_to_n(n: int) -> list:\n    # Your code here", "timestamp": 1716001760.123456}, {"role": "assistant", "content": "def get_squares_up_to_n(n: int) -> list:\n    return [x*x for x in range(n + 1)]", "timestamp": 1716001760.223456}], "metadata": {"expected_answer": {"name": "get_squares_up_to_n", "signature": "def get_squares_up_to_n(n: int) -> list:", "test_cases": [{"input": (4,), "output": [0, 1, 4, 9, 16]}, {"input": (0,), "output": [0]}, {"input": (1,), "output": [0, 1]}], "solution": "def get_squares_up_to_n(n: int) -> list:\n    return [x*x for x in range(n + 1)]"}}}
{"type": "qa", "difficulty": 0.4, "conversation": [{"role": "user", "content": "What is a common traditional use for birch bark in some northern indigenous cultures?", "timestamp": 1716001780.123456}, {"role": "assistant", "content": "Birch bark was traditionally used for making canoes containers dwelling covers and sometimes for writing or art due to its waterproof pliable and durable nature.", "timestamp": 1716001780.223456}], "metadata": {"expected_answer": "Birch bark was traditionally used by many northern indigenous cultures for making canoes containers dwelling covers and sometimes for writing or creating art due to its waterproof pliable and durable nature."}}
{"type": "math", "difficulty": 0.6, "conversation": [{"role": "user", "content": "A traditional fishing net is 15.5 meters long. Another is 12.75 meters. What is the total length if placed end to end?", "timestamp": 1716001800.123456}, {"role": "assistant", "content": "28.25 meters", "timestamp": 1716001800.223456}], "metadata": {"expected_answer": 28.25}}
{"type": "code", "difficulty": 0.2, "conversation": [{"role": "user", "content": "Write a Python function `is_negative` that returns True if an integer `num` is less than 0 False otherwise.\ndef is_negative(num: int) -> bool:\n    # Your code here", "timestamp": 1716001820.123456}, {"role": "assistant", "content": "def is_negative(num: int) -> bool:\n    return num < 0", "timestamp": 1716001820.223456}], "metadata": {"expected_answer": {"name": "is_negative", "signature": "def is_negative(num: int) -> bool:", "test_cases": [{"input": (-5,), "output": true}, {"input": (0,), "output": false}, {"input": (10,), "output": false}], "solution": "def is_negative(num: int) -> bool:\n    return num < 0"}}}
{"type": "qa", "difficulty": 0.3, "conversation": [{"role": "user", "content": "In the Haudenosaunee (Iroquois) Great Law of Peace what is the significance of the white pine tree?", "timestamp": 1716001840.123456}, {"role": "assistant", "content": "The white pine tree symbolizes peace unity and strength. Its five needles bundled together represent the original five nations united in peace. Weapons were buried beneath it.", "timestamp": 1716001840.223456}], "metadata": {"expected_answer": "In the Haudenosaunee Great Law of Peace the white pine tree (Tree of Peace) symbolizes peace unity and strength among the nations. Its five needles bundled together represent the original five nations united in peace. Weapons were symbolically buried beneath its roots."}}
{"type": "math", "difficulty": 0.5, "conversation": [{"role": "user", "content": "If a recipe for 4 people needs 2 cups of wild rice how many cups are needed for 10 people?", "timestamp": 1716001860.123456}, {"role": "assistant", "content": "5.0 cups", "timestamp": 1716001860.223456}], "metadata": {"expected_answer": 5.0}}
{"type": "code", "difficulty": 0.6, "conversation": [{"role": "user", "content": "Python function `remove_duplicates_from_list(items: list) -> list` that removes duplicates while preserving order.\n# Example: [1,2,1,3,2] -> [1,2,3]\n# Your code here", "timestamp": 1716001880.123456}, {"role": "assistant", "content": "def remove_duplicates_from_list(items: list) -> list:\n    seen = set()\n    result = []\n    for item in items:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result", "timestamp": 1716001880.223456}], "metadata": {"expected_answer": {"name": "remove_duplicates_from_list", "signature": "def remove_duplicates_from_list(items: list) -> list:", "test_cases": [{"input": ([1, 2, 1, 3, 2, 4],), "output": [1, 2, 3, 4]}, {"input": (['a', 'b', 'a'],), "output": ['a', 'b']}, {"input": ([],), "output": []}], "solution": "def remove_duplicates_from_list(items: list) -> list:\n    seen = set()\n    result = []\n    for item in items:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result"}}}